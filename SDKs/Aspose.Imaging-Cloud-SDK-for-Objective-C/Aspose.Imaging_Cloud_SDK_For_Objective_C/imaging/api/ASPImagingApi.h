#import <Foundation/Foundation.h>
#import "ASPBaseResponse.h"
#import "ASPImagingResponse.h"
#import "ASPObject.h"
#import "ASPApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface ASPImagingApi: NSObject

@property(nonatomic, assign)ASPApiClient *apiClient;

-(instancetype) initWithApiClient:(ASPApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(ASPImagingApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;
///
///
/// Update parameters of bmp image.
/// 
///
/// @param bitsPerPixel Color depth.
/// @param horizontalResolution New horizontal resolution.
/// @param verticalResolution New vertical resolution.
/// @param file 
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postImageBmpWithCompletionBlock :(NSNumber*) bitsPerPixel 
     horizontalResolution:(NSNumber*) horizontalResolution 
     verticalResolution:(NSNumber*) verticalResolution 
     file:(NSURL*) file 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Crop image from body
/// 
///
/// @param format Output file format. Valid Formats: Bmp, png, jpg, tiff, psd, gif.
/// @param x X position of start point for cropping rectangle
/// @param y Y position of start point for cropping rectangle
/// @param width Width of cropping rectangle
/// @param height Height of cropping rectangle
/// @param file 
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postCropImageWithCompletionBlock :(NSString*) format 
     x:(NSNumber*) x 
     y:(NSNumber*) y 
     width:(NSNumber*) width 
     height:(NSNumber*) height 
     file:(NSURL*) file 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Update parameters of gif image.
/// 
///
/// @param file 
/// @param backgroundColorIndex Index of the background color.
/// @param colorResolution Color resolution.
/// @param hasTrailer Specifies if image has trailer.
/// @param interlaced Specifies if image is interlaced.
/// @param isPaletteSorted Specifies if palette is sorted.
/// @param pixelAspectRatio Pixel aspect ratio.
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postImageGifWithCompletionBlock :(NSURL*) file
     backgroundColorIndex:(NSString*) backgroundColorIndex 
     colorResolution:(NSString*) colorResolution 
     hasTrailer:(NSNumber*) hasTrailer 
     interlaced:(NSNumber*) interlaced 
     isPaletteSorted:(NSNumber*) isPaletteSorted 
     pixelAspectRatio:(NSString*) pixelAspectRatio 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Update parameters of jpg image.
/// 
///
/// @param file 
/// @param quality Quality of image. From 0 to 100. Default is 75
/// @param compressionType Compression type.
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postImageJpgWithCompletionBlock :(NSURL*) file 
     quality:(NSNumber*) quality 
     compressionType:(NSString*) compressionType 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Update parameters of png image.
/// 
///
/// @param file 
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postImagePngWithCompletionBlock :(NSURL*) file 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Update parameters of psd image.
/// 
///
/// @param file 
/// @param channelsCount Count of channels.
/// @param compressionMethod Compression method.
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postImagePsdWithCompletionBlock :(NSURL*) file 
     channelsCount:(NSNumber*) channelsCount 
     compressionMethod:(NSString*) compressionMethod 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Change scale of an image from body
/// 
///
/// @param format Output file format. Valid Formats: Bmp, png, jpg, tiff, psd, gif.
/// @param newWidth New width of the scaled image.
/// @param newHeight New height of the scaled image.
/// @param file 
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postChangeImageScaleWithCompletionBlock :(NSString*) format 
     newWidth:(NSNumber*) newWidth 
     newHeight:(NSNumber*) newHeight 
     file:(NSURL*) file 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Rotate and flip existing image and get it from response.
/// 
///
/// @param format Number of frame. (Bmp, png, jpg, tiff, psd, gif.)
/// @param method New width of the scaled image. (Rotate180FlipNone,  Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY)
/// @param file 
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postImageRotateFlipWithCompletionBlock :(NSString*) format 
     method:(NSString*) method 
     file:(NSURL*) file 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Export existing image to another format. Image is passed as request body.
/// 
///
/// @param format Output file format. (Bmp, png, jpg, tiff, psd, gif.)
/// @param file 
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postImageSaveAsWithCompletionBlock :(NSString*) format 
     file:(NSURL*) file 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Update tiff image.
/// 
///
/// @param file 
/// @param compression New compression.
/// @param resolutionUnit New resolution unit.
/// @param bitDepth New bit depth.
/// @param fromScratch 
/// @param horizontalResolution New horizontal resolution.
/// @param verticalResolution New verstical resolution.
/// @param outPath Path to save result
/// 
///
/// @return NSURL*
-(NSNumber*) postProcessTiffWithCompletionBlock :(NSURL*) file 
     compression:(NSString*) compression 
     resolutionUnit:(NSString*) resolutionUnit 
     bitDepth:(NSNumber*) bitDepth 
     fromScratch:(NSNumber*) fromScratch 
     horizontalResolution:(NSNumber*) horizontalResolution 
     verticalResolution:(NSNumber*) verticalResolution 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Append tiff image.
/// 
///
/// @param name Original image name.
/// @param appendFile Second image file name.
/// @param storage The images storage.
/// @param folder The images folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postTiffAppendWithCompletionBlock :(NSString*) name 
     appendFile:(NSString*) appendFile 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get tiff image for fax.
/// 
///
/// @param name The image file name.
/// @param storage The image file storage.
/// @param folder The image file folder.
/// @param outPath Path to save result
/// 
///
/// @return NSURL*
-(NSNumber*) getTiffToFaxWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Perform scaling, cropping and flipping of an image in single request. Image is passed as request body.
/// 
///
/// @param format Save image in another format. By default format remains the same
/// @param newWidth New Width of the scaled image.
/// @param newHeight New height of the scaled image.
/// @param x X position of start point for cropping rectangle
/// @param y Y position of start point for cropping rectangle
/// @param rectWidth Width of cropping rectangle
/// @param rectHeight Height of cropping rectangle
/// @param rotateFlipMethod RotateFlip method. Default is RotateNoneFlipNone.
/// @param file 
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// 
///
/// @return NSURL*
-(NSNumber*) postImageSaveAs_2WithCompletionBlock :(NSString*) format 
     newWidth:(NSNumber*) newWidth 
     newHeight:(NSNumber*) newHeight 
     x:(NSNumber*) x 
     y:(NSNumber*) y 
     rectWidth:(NSNumber*) rectWidth 
     rectHeight:(NSNumber*) rectHeight 
     rotateFlipMethod:(NSString*) rotateFlipMethod 
     file:(NSURL*) file 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Update parameters of bmp image.
/// 
///
/// @param name Filename of image.
/// @param bitsPerPixel Color depth.
/// @param horizontalResolution New horizontal resolution.
/// @param verticalResolution New vertical resolution.
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getImageBmpWithCompletionBlock :(NSString*) name 
     bitsPerPixel:(NSNumber*) bitsPerPixel 
     horizontalResolution:(NSNumber*) horizontalResolution 
     verticalResolution:(NSNumber*) verticalResolution 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Crop existing image
/// 
///
/// @param name The image name.
/// @param format Output file format. Valid Formats: Bmp, png, jpg, tiff, psd, gif.
/// @param x X position of start point for cropping rectangle
/// @param y Y position of start point for cropping rectangle
/// @param width Width of cropping rectangle
/// @param height Height of cropping rectangle
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getCropImageWithCompletionBlock :(NSString*) name 
     format:(NSString*) format 
     x:(NSNumber*) x 
     y:(NSNumber*) y 
     width:(NSNumber*) width 
     height:(NSNumber*) height 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Get separate frame of tiff image
/// 
///
/// @param name Filename of image.
/// @param frameId Number of frame.
/// @param newWidth New width of the scaled image.
/// @param newHeight New height of the scaled image.
/// @param x X position of start point for cropping rectangle
/// @param y Y position of start point for cropping rectangle
/// @param rectWidth Width of cropping rectangle
/// @param rectHeight Height of cropping rectangle
/// @param rotateFlipMethod RotateFlip method.(Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY. Default is RotateNoneFlipNone.)
/// @param saveOtherFrames Include all other frames or just specified frame in response.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getImageFrameWithCompletionBlock :(NSString*) name 
     frameId:(NSNumber*) frameId 
     newWidth:(NSNumber*) newWidth 
     newHeight:(NSNumber*) newHeight 
     x:(NSNumber*) x 
     y:(NSNumber*) y 
     rectWidth:(NSNumber*) rectWidth 
     rectHeight:(NSNumber*) rectHeight 
     rotateFlipMethod:(NSString*) rotateFlipMethod 
     saveOtherFrames:(NSNumber*) saveOtherFrames 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Get properties of a tiff frame.
/// 
///
/// @param name Filename with image.
/// @param frameId Number of frame.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return ASPImagingResponse*
-(NSNumber*) getImageFramePropertiesWithCompletionBlock :(NSString*) name 
     frameId:(NSNumber*) frameId 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPImagingResponse* output, NSError* error))completionBlock;
    


///
///
/// Update parameters of bmp image.
/// 
///
/// @param name Filename of image.
/// @param backgroundColorIndex Index of the background color.
/// @param colorResolution Color resolution.
/// @param hasTrailer Specifies if image has trailer.
/// @param interlaced Specifies if image is interlaced.
/// @param isPaletteSorted Specifies if palette is sorted.
/// @param pixelAspectRatio Pixel aspect ratio.
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getImageGifWithCompletionBlock :(NSString*) name 
     backgroundColorIndex:(NSString*) backgroundColorIndex 
     colorResolution:(NSString*) colorResolution 
     hasTrailer:(NSNumber*) hasTrailer 
     interlaced:(NSNumber*) interlaced 
     isPaletteSorted:(NSNumber*) isPaletteSorted 
     pixelAspectRatio:(NSString*) pixelAspectRatio 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Update parameters of jpg image.
/// 
///
/// @param name Filename of image.
/// @param quality Quality of image. From 0 to 100. Default is 75
/// @param compressionType Compression type.
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getImageJpgWithCompletionBlock :(NSString*) name 
     quality:(NSNumber*) quality 
     compressionType:(NSString*) compressionType 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Update parameters of png image.
/// 
///
/// @param name Filename of image.
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getImagePngWithCompletionBlock :(NSString*) name 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Get properties of an image.
/// 
///
/// @param name The image name.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return ASPImagingResponse*
-(NSNumber*) getImagePropertiesWithCompletionBlock :(NSString*) name 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPImagingResponse* output, NSError* error))completionBlock;
    


///
///
/// Update parameters of psd image.
/// 
///
/// @param name Filename of image.
/// @param channelsCount Count of channels.
/// @param compressionMethod Compression method.
/// @param fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getImagePsdWithCompletionBlock :(NSString*) name 
     channelsCount:(NSNumber*) channelsCount 
     compressionMethod:(NSString*) compressionMethod 
     fromScratch:(NSNumber*) fromScratch 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Change scale of an existing image
/// 
///
/// @param name The image name.
/// @param format Output file format. Valid Formats: Bmp, png, jpg, tiff, psd, gif.
/// @param newWidth New width of the scaled image.
/// @param newHeight New height of the scaled image.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getChangeImageScaleWithCompletionBlock :(NSString*) name 
     format:(NSString*) format 
     newWidth:(NSNumber*) newWidth 
     newHeight:(NSNumber*) newHeight 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Rotate and flip existing image
/// 
///
/// @param name Filename of image.
/// @param format Number of frame. (Bmp, png, jpg, tiff, psd, gif.)
/// @param method New width of the scaled image. (Rotate180FlipNone,  Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY)
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getImageRotateFlipWithCompletionBlock :(NSString*) name 
     format:(NSString*) format 
     method:(NSString*) method 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Export existing image to another format
/// 
///
/// @param name Filename of image.
/// @param format Output file format. (Bmp, png, jpg, tiff, psd, gif.)
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getImageSaveAsWithCompletionBlock :(NSString*) name 
     format:(NSString*) format 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Perform scaling, cropping and flipping of an image in single request.
/// 
///
/// @param name Filename of image.
/// @param format Save image in another format. By default format remains the same
/// @param newWidth New Width of the scaled image.
/// @param newHeight New height of the scaled image.
/// @param x X position of start point for cropping rectangle
/// @param y Y position of start point for cropping rectangle
/// @param rectWidth Width of cropping rectangle
/// @param rectHeight Height of cropping rectangle
/// @param rotateFlipMethod RotateFlip method. Default is RotateNoneFlipNone.
/// @param outPath Path to updated file, if this is empty, response contains streamed image.
/// @param folder Folder with image to process.
/// @param storage 
/// 
///
/// @return NSURL*
-(NSNumber*) getUpdatedImageWithCompletionBlock :(NSString*) name 
     format:(NSString*) format 
     newWidth:(NSNumber*) newWidth 
     newHeight:(NSNumber*) newHeight 
     x:(NSNumber*) x 
     y:(NSNumber*) y 
     rectWidth:(NSNumber*) rectWidth 
     rectHeight:(NSNumber*) rectHeight 
     rotateFlipMethod:(NSString*) rotateFlipMethod 
     outPath:(NSString*) outPath 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    



@end
